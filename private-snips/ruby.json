{
  "pp between lines": {
    "prefix": ["ppl"],
    "body": [
      "pp '=================================================='",
      "pp ${0}",
      "pp '=================================================='"
    ]
  },
  "debbuger": {
    "prefix": ["d"],
    "body": [
      "debugger"
    ]
  },
  "Controller test": {
    "prefix": ["ct"],
    "body": [
      "require 'test_helper'",
      "",
      "class Api::V1::${1:ControllerTest} < ActionController::TestCase",
      "\t${0}",
      "end"
    ]
  },
  "test aciton": {
    "prefix": ["ta"],
    "body": [
      "test '${1:description}' do",
      "\t${0}",
      "end"
    ]
  },
  "assert_response": {
    "prefix": ["ar"],
    "body": [
      "assert_response ${0}"
    ]
  },
  "controller": {
    "prefix": ["cc"],
    "body": [
      "class ${1:Controller} < ${2:ApplicationController}",
      "\t${0}",
      "end"
    ]
  },
  "Class": {
    "prefix": ["cl"],
    "body": [
      "class ${1:Name}",
      "\t${0}",
      "end"
    ]
  },
  "df": {
    "prefix": ["df"],
    "body": [
      "def ${1:name}",
      "\t${0}",
      "end"
    ]
  },
  "def": {
    "prefix": ["def"],
    "body": [
      "def ${1:name}",
      "\t${0}",
      "end"
    ]
  },
  "respond_with": {
    "prefix": ["rw"],
    "body": [
      "respond_with(${0})"
    ]
  },
  "assert_equal": {
    "prefix": ["aeq"],
    "body": [
      "assert_equal ${0}"
    ]
  },
  "require": {
    "prefix": ["req"],
    "body": [
      "require '${0}'"
    ]
  },
  "constructor": {
    "prefix": ["init"],
    "body": [
      "def initialize",
      "\t${0}",
      "end"
    ]
  },
  "constructor with params": {
    "prefix": ["initp"],
    "body": [
      "def initialize(${1})",
      "\t${2} = $1",
      "end"
    ]
  },
  "return": {
    "prefix": ["ret"],
    "body": [
      "return ${0}"
    ]
  },
  "do": {
    "prefix": ["do"],
    "body": [
      "do",
      "\t${0}",
      "end"
    ]
  },
  "do |x|": {
    "prefix": ["doa"],
    "body": [
      "do |${1}|",
      "\t${0}",
      "end"
    ]
  },
  "if": {
    "prefix": ["if"],
    "body": [
      "if ${1:condition}",
      "\t${0}",
      "end"
    ]
  },
  "if else": {
    "prefix": ["ife"],
    "body": [
      "if ${1:condition}",
      "\t${2}",
      "else",
      "\t${0}",
      "end"
    ]
  },
  "elsif": {
    "prefix": ["eif"],
    "body": [
      "elsif ${1:condition}",
      "\t${0}"
    ]
  },
  "strong params": {
    "prefix": ["sp"],
    "body": [
      "def ${1:name}",
      "  params.require(${2:require}).permit(${0})",
      "end"
    ]
  },
  "crud -> show": {
    "prefix": ["crs"],
    "body": [
      "def show",
      "  @${1:entity} = @${2:Model}.find(params[:id])",
      "end"
    ]
  },
  "crud -> edit": {
    "prefix": ["cre"],
    "body": [
      "def edit",
      "  @${1:entity} = @${2:Model}.find(params[:id])",
      "end"
    ]
  },
  "crud -> create": {
    "prefix": ["crc"],
    "body": [
      "def create",
      "  @${1:entity} = ${2:model}.new(${3:params})",
      "  if @$1.save",
      "    flash[:notice] = '$2 has been successfully created'",
      "    redirect_to $1_path(@$1)",
      "  else",
      "    flash[:notice] = '$2 has not been created'",
      "    render :new",
      "  end",
      "end"
    ]
  },
  "crud -> update": {
    "prefix": ["cru"],
    "body": [
      "def update",
      "  @${1:entity} = ${2:model}.find(params[:id])",
      "  if @$1.update(${3:params})",
      "    flash[:notice] = '$2 has been successfully updated'",
      "    redirect_to $1_path(@$1)",
      "  else",
      "    flash[:notice] = '$2 has not been updated'",
      "    render :edit",
      "  end",
      "end"
    ]
  },
  "crud -> destroy": {
    "prefix": ["crd"],
    "body": [
      "def destroy",
      "  @${1:entity} = ${2:model}.find(params[:id])",
      "  if @$1.destroy",
      "    flash[:notice] = '$2 has been successfully deleted'",
      "    redirect_to $1s_path",
      "  else",
      "    flash[:notice] = '$2 has not been deleted'",
      "    render $1_path(@$1)",
      "  end",
      "end"
    ]
  },
  "crud": {
    "prefix": ["crud"],
    "body": [
      "def index",
      "  @${1:entity} = ${2:Model}.all",
      "end",
      "",
      "def show",
      "  @$1 = $2.find(params[:id])",
      "end",
      "",
      "def new",
      "  @$1 = $2.new",
      "end",
      "",
      "def edit",
      "  @$1 = $2.find(params[:id])",
      "end",
      "",
      "def create",
      "  @$1 = $2.new($1_params)",
      "",
      "  if @$1.save",
      "    redirect_to $1_path(@$1), notice: '$2 has been successfully created'",
      "  else",
      "    render :new, status: :unprocessable_entity",
      "  end",
      "end",
      "",
      "def update",
      "  @$1 = $2.find(params[:id])",
      "",
      "  if @$1.update($1_params)",
      "    redirect_to $1_path(@$1), notice: '$2 has been successfully updated'",
      "  else",
      "    render :edit, status: :unprocessable_entity",
      "  end",
      "end",
      "",
      "def destroy",
      "  @$1 = $2.find(params[:id])",
      "  @$1.destroy",

      "  redirect_to $1s_url, notice: '$2 was successfully destroyed.'",
      "end",
      "",
      "private",
      "",
      "def $1_params",
      "  params.require(:$1).permit(${0})",
      "end"
    ]
  },
  "se": {
    "prefix": ["se"],
    "body": [
      "def set_${1:entity}",
      "  @$1 = ${2}.find(params[:id])",
      "end"
    ]
  }
}
