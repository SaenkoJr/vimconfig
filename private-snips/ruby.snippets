# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet def "def ... end"
def ${1:name}
	${0}
end
endsnippet

snippet cl "class" b
class ${1}
	${0}
end
endsnippet

snippet ife "if else"
if ${1:true}
	${2:42}
else
	${0:69}
end
endsnippet

snippet if "if"
if ${1:true}
	${0}
end
endsnippet

snippet ret "return"
return ${0}
endsnippet

snippet pl "======================================" b
puts "======================================"
endsnippet

snippet pll "======================================" b
puts "======================================"
${1:pp} ${0}
puts "======================================"
endsnippet

snippet ps "puts "
puts ${0}
endsnippet

snippet froz "frozen string literal" b
# frozen_string_literal: true
endsnippet

snippet priv "private" b
private
endsnippet

snippet mod "module" b
module ${1:ModuleName}
	${0}
end
endsnippet

snippet valid "validates" b
validates ${1::attribute}, ${2:presence: true}${0:,}
endsnippet

snippet do "do .. end"
do
	${0}
end
endsnippet

snippet dob "do |block| .. end"
do |${1:block}|
	${0}
end
endsnippet

snippet bauth "http basic auth" b
http_basic_authenticate_with name: ${1:'name'}, password: ${2:'secret'}, except: ${0:%i[index]}
endsnippet

snippet fk "foreign_key"
foreign_key: ${0::author_id}
endsnippet

snippet test "test case"
test '${1:description}' do
	${2:test}
	assert_response ${0}
end
endsnippet
